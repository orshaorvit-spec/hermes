import { useState, useEffect } from 'react';
import { supabase } from '../lib/supabase';
import { User } from '@supabase/supabase-js';

interface Profile {
  id: string;
  email: string;
  full_name: string | null;
  avatar_url: string | null;
  role: string;
  created_at: string;
  updated_at: string;
}

/**
 * ==========================================================================
 * –•–£–ö –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (useAuth)
 * ==========================================================================
 * 
 * –ü—Ä–æ—Å—Ç–æ–π –∏ –Ω–∞–¥–µ–∂–Ω—ã–π —Ö—É–∫ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–π –ª–æ–≥–∏–∫–æ–π.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ email/password –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é.
 * 
 * –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
 * - –í—Ö–æ–¥ –ø–æ email –∏ –ø–∞—Ä–æ–ª—é
 * - –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π  
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * - –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
 * - –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
 * 
 * –°–û–°–¢–û–Ø–ù–ò–ï:
 * - user: –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Supabase Auth
 * - profile: –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–∞–±–ª–∏—Ü—ã profiles
 * - loading: —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏
 * - error: —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
 */
export const useAuth = () => {
  const [user, setUser] = useState<User | null>(null);
  const [profile, setProfile] = useState<Profile | null>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);

  useEffect(() => {
    initializeAuth();
  }, []);

  const initializeAuth = async () => {
    try {
      console.log('üîê AUTH: –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
      
      // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Å—Å–∏—é
      const { data: { session } } = await supabase.auth.getSession();
      
      if (session?.user) {
        console.log('‚úÖ AUTH: –ù–∞–π–¥–µ–Ω–∞ –∞–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è:', session.user.email);
        setUser(session.user);
        await loadUserProfile(session.user);
      } else {
        console.log('‚ÑπÔ∏è AUTH: –ê–∫—Ç–∏–≤–Ω–∞—è —Å–µ—Å—Å–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      const { data: { subscription } } = supabase.auth.onAuthStateChange(
        async (event, session) => {
          console.log('üîÑ AUTH: –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è:', event);
          
          if (session?.user) {
            setUser(session.user);
            await loadUserProfile(session.user);
          } else {
            setUser(null);
            setProfile(null);
          }
          setError(null);
        }
      );

      return () => subscription.unsubscribe();
    } catch (err) {
      console.error('‚ùå AUTH: –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', err);
      setError('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏');
    } finally {
      setLoading(false);
    }
  };

  const loadUserProfile = async (user: User) => {
    try {
      console.log('üë§ AUTH: –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      
      // –ò—â–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å
      const { data: existingProfile, error: fetchError } = await supabase
        .from('profiles')
        .select('*')
        .eq('id', user.id)
        .single();

      if (existingProfile) {
        console.log('‚úÖ AUTH: –ü—Ä–æ—Ñ–∏–ª—å –Ω–∞–π–¥–µ–Ω');
        setProfile(existingProfile);
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –µ—Å–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
      if (fetchError?.code === 'PGRST116') {
        console.log('üìù AUTH: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è');
        
        const newProfile = {
          id: user.id,
          email: user.email || '',
          full_name: user.user_metadata?.full_name || '',
          avatar_url: user.user_metadata?.avatar_url || null,
          role: 'member'
        };

        const { data: createdProfile, error: createError } = await supabase
          .from('profiles')
          .insert(newProfile)
          .select()
          .single();

        if (createError) {
          console.error('‚ùå AUTH: –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', createError);
          throw createError;
        }

        console.log('‚úÖ AUTH: –ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω');
        setProfile(createdProfile);
      } else {
        throw fetchError;
      }
    } catch (err) {
      console.error('‚ùå AUTH: –û—à–∏–±–∫–∞ —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–æ—Ñ–∏–ª–µ–º:', err);
      setError('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
    }
  };

  const signInWithEmail = async (email: string, password: string) => {
    try {
      console.log('üîë AUTH: –ü–æ–ø—ã—Ç–∫–∞ –≤—Ö–æ–¥–∞:', email);
      setError(null);
      setLoading(true);

      const { data, error } = await supabase.auth.signInWithPassword({
        email: email.trim(),
        password
      });

      if (error) {
        console.error('‚ùå AUTH: –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞:', error.message);
        
        if (error.message.includes('Invalid login credentials')) {
          setError('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å.');
        } else {
          setError(error.message);
        }
        return { error };
      }

      console.log('‚úÖ AUTH: –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥');
      return { data, error: null };
    } catch (err) {
      console.error('‚ùå AUTH: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—Ö–æ–¥–µ:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞';
      setError(errorMessage);
      return { error: { message: errorMessage } };
    } finally {
      setLoading(false);
    }
  };

  const signUpWithEmail = async (email: string, password: string, fullName?: string) => {
    try {
      console.log('üìù AUTH: –ü–æ–ø—ã—Ç–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', email);
      setError(null);
      setLoading(true);

      const { data, error } = await supabase.auth.signUp({
        email: email.trim(),
        password,
        options: {
          data: {
            full_name: fullName?.trim() || ''
          }
        }
      });

      if (error) {
        console.error('‚ùå AUTH: –û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', error.message);
        
        if (error.message.includes('User already registered')) {
          setError('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –≤–æ–π—Ç–∏.');
        } else {
          setError(error.message);
        }
        return { error };
      }

      console.log('‚úÖ AUTH: –£—Å–ø–µ—à–Ω–∞—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è');
      return { data, error: null };
    } catch (err) {
      console.error('‚ùå AUTH: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏';
      setError(errorMessage);
      return { error: { message: errorMessage } };
    } finally {
      setLoading(false);
    }
  };

  const signOut = async () => {
    try {
      console.log('üö™ AUTH: –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
      
      const { error } = await supabase.auth.signOut();
      
      if (error) {
        console.error('‚ùå AUTH: –û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞:', error);
        setError('–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Å–∏—Å—Ç–µ–º—ã');
        return { error };
      }

      console.log('‚úÖ AUTH: –£—Å–ø–µ—à–Ω—ã–π –≤—ã—Ö–æ–¥');
      setUser(null);
      setProfile(null);
      setError(null);
      
      return { error: null };
    } catch (err) {
      console.error('‚ùå AUTH: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –≤—ã—Ö–æ–¥–∞';
      setError(errorMessage);
      return { error: { message: errorMessage } };
    }
  };

  const updateProfile = async (updates: Partial<Profile>) => {
    try {
      if (!user) {
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      console.log('üë§ AUTH: –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è');

      const { data, error } = await supabase
        .from('profiles')
        .update(updates)
        .eq('id', user.id)
        .select()
        .single();

      if (error) {
        console.error('‚ùå AUTH: –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è:', error);
        throw error;
      }

      console.log('‚úÖ AUTH: –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω');
      setProfile(data);
      return { data, error: null };
    } catch (err) {
      console.error('‚ùå AUTH: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
      const errorMessage = err instanceof Error ? err.message : '–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è';
      setError(errorMessage);
      return { data: null, error: { message: errorMessage } };
    }
  };

  return {
    user,
    profile,
    loading,
    error,
    signInWithEmail,
    signUpWithEmail,
    signOut,
    updateProfile
  };
};