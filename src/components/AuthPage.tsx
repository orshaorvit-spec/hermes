import React, { useState } from 'react';
import { AlertCircle, Mail, Lock, User, Eye, EyeOff, LogIn, UserPlus } from 'lucide-react';
import { useAuth } from '../hooks/useAuth';

/**
 * ==========================================================================
 * –°–¢–†–ê–ù–ò–¶–ê –ê–í–¢–û–†–ò–ó–ê–¶–ò–ò (AUTH PAGE)
 * ==========================================================================
 * 
 * –ü—Ä–æ—Å—Ç–∞—è –∏ –ø–æ–Ω—è—Ç–Ω–∞—è —Ñ–æ—Ä–º–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ —Å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ–º –º–µ–∂–¥—É —Ä–µ–∂–∏–º–∞–º–∏.
 * –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ email/password –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤.
 * 
 * –§–£–ù–ö–¶–ò–û–ù–ê–õ–¨–ù–û–°–¢–¨:
 * - –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ: –≤—Ö–æ–¥ ‚Üî —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
 * - –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–æ–ª–µ–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
 * - –ü–æ–∫–∞–∑/—Å–∫—Ä—ã—Ç–∏–µ –ø–∞—Ä–æ–ª—è
 * - –ß–µ—Ç–∫–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–∞—Ö
 * - –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–¥—Å–∫–∞–∑–∫–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 * 
 * –î–ò–ó–ê–ô–ù:
 * - –ì—Ä–∞–¥–∏–µ–Ω—Ç–Ω—ã–π —Ñ–æ–Ω —Å –∞–Ω–∏–º–∞—Ü–∏–µ–π
 * - –°—Ç–µ–∫–ª—è–Ω–Ω—ã–π —ç—Ñ—Ñ–µ–∫—Ç –¥–ª—è —Ñ–æ—Ä–º—ã
 * - –ü–ª–∞–≤–Ω—ã–µ –∞–Ω–∏–º–∞—Ü–∏–∏ –ø–µ—Ä–µ—Ö–æ–¥–æ–≤
 * - –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å—Ç–∫–∞ –¥–ª—è –º–æ–±–∏–ª—å–Ω—ã—Ö
 * 
 * –ê–ù–ò–ú–ê–¶–ò–ò:
 * - fadeIn –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
 * - slideIn –¥–ª—è —Ñ–æ—Ä–º—ã
 * - bounce –¥–ª—è –∫–Ω–æ–ø–æ–∫
 * - pulse –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
 */
export const AuthPage: React.FC = () => {
  const { signInWithEmail, signUpWithEmail, loading, error } = useAuth();
  
  const [isSignUp, setIsSignUp] = useState(false);
  const [showPassword, setShowPassword] = useState(false);
  const [formData, setFormData] = useState({
    email: '',
    password: '',
    fullName: ''
  });

  const [validationErrors, setValidationErrors] = useState({
    email: '',
    password: '',
    fullName: ''
  });

  const validateForm = () => {
    const errors = {
      email: '',
      password: '',
      fullName: ''
    };

    // Email validation
    if (!formData.email) {
      errors.email = 'Email –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (!/\S+@\S+\.\S+/.test(formData.email)) {
      errors.email = '–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π email';
    }

    // Password validation
    if (!formData.password) {
      errors.password = '–ü–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω';
    } else if (formData.password.length < 6) {
      errors.password = '–ü–∞—Ä–æ–ª—å –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –º–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤';
    }

    // Full name validation for sign up
    if (isSignUp && !formData.fullName.trim()) {
      errors.fullName = '–ò–º—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ';
    }

    setValidationErrors(errors);
    return !Object.values(errors).some(error => error !== '');
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    
    if (!validateForm()) {
      return;
    }

    console.log(`üîê –ü–æ–ø—ã—Ç–∫–∞ ${isSignUp ? '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏' : '–≤—Ö–æ–¥–∞'} —Å email:`, formData.email);
    
    try {
      let result;
      
      if (isSignUp) {
        result = await signUpWithEmail(
          formData.email, 
          formData.password, 
          formData.fullName
        );
      } else {
        result = await signInWithEmail(formData.email, formData.password);
      }

      if (result.error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', result.error);
      } else {
        console.log('‚úÖ –£—Å–ø–µ—à–Ω–∞—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è');
        // –§–æ—Ä–º–∞ –æ—á–∏—Å—Ç–∏—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–π –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
      }
    } catch (err) {
      console.error('‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏:', err);
    }
  };

  const handleInputChange = (field: string, value: string) => {
    setFormData(prev => ({ ...prev, [field]: value }));
    // –û—á–∏—â–∞–µ–º –æ—à–∏–±–∫—É –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ
    if (validationErrors[field as keyof typeof validationErrors]) {
      setValidationErrors(prev => ({ ...prev, [field]: '' }));
    }
  };

  const toggleMode = () => {
    console.log(`üîÑ –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ ${!isSignUp ? '—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é' : '–≤—Ö–æ–¥'}`);
    setIsSignUp(!isSignUp);
    setFormData({ email: '', password: '', fullName: '' });
    setValidationErrors({ email: '', password: '', fullName: '' });
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-blue-50 via-white to-indigo-50 flex items-center justify-center p-4 animate-fadeIn">
      <div className="w-full max-w-md">
        {/* Logo and Header */}
        <div className="text-center mb-8 animate-slideIn">
          <div className="inline-flex items-center justify-center w-20 h-20 bg-gradient-to-br from-blue-500 to-blue-600 rounded-3xl shadow-2xl mb-6 animate-scaleUp">
            <span className="text-white font-bold text-3xl">H</span>
          </div>
          
          <h1 className="text-4xl font-bold text-gray-900 mb-3">
            {isSignUp ? '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' : '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å'}
          </h1>
          <p className="text-gray-600 text-lg">
            {isSignUp 
              ? '–ü—Ä–∏—Å–æ–µ–¥–∏–Ω—è–π—Ç–µ—Å—å –∫ TeamHub –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏'
              : '–í–æ–π–¥–∏—Ç–µ –≤ TeamHub –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã'
            }
          </p>
        </div>

        {/* Auth Form */}
        <div className="bg-white/80 backdrop-blur-xl rounded-3xl shadow-2xl border border-white/20 p-8 animate-slideIn">
          {/* Error Display */}
          {error && (
            <div className="mb-6 p-4 rounded-xl bg-red-50 border border-red-200 flex items-start space-x-3 animate-fadeIn">
              <AlertCircle className="w-5 h-5 text-red-500 mt-0.5 flex-shrink-0" />
              <div>
                <h3 className="text-sm font-medium text-red-800">–û—à–∏–±–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏</h3>
                <p className="text-sm text-red-700 mt-1">{error}</p>
                {error.includes('–ù–µ–≤–µ—Ä–Ω—ã–π email –∏–ª–∏ –ø–∞—Ä–æ–ª—å') && (
                  <p className="text-sm text-red-600 mt-2">
                    üí° –í–æ–∑–º–æ–∂–Ω–æ, –≤–∞–º –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞{' '}
                    <button 
                      onClick={() => setIsSignUp(true)}
                      className="underline hover:no-underline font-medium transition-all"
                    >
                      –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è
                    </button>
                  </p>
                )}
                {error.includes('—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç') && (
                  <p className="text-sm text-red-600 mt-2">
                    üí° –ü–æ–ø—Ä–æ–±—É–π—Ç–µ{' '}
                    <button 
                      onClick={() => setIsSignUp(false)}
                      className="underline hover:no-underline font-medium transition-all"
                    >
                      –≤–æ–π—Ç–∏
                    </button>
                    {' '}—Å —ç—Ç–∏–º email
                  </p>
                )}
              </div>
            </div>
          )}

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Full Name - —Ç–æ–ª—å–∫–æ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ */}
            {isSignUp && (
              <div className="space-y-2">
                <label className="block text-sm font-semibold text-gray-700">
                  –ü–æ–ª–Ω–æ–µ –∏–º—è
                </label>
                <div className="relative">
                  <User className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                  <input
                    type="text"
                    value={formData.fullName}
                    onChange={(e) => handleInputChange('fullName', e.target.value)}
                    className={`w-full pl-12 pr-4 py-4 border-2 rounded-xl focus:outline-none transition-all duration-300 ${
                      validationErrors.fullName 
                        ? 'border-red-300 focus:border-red-500 bg-red-50' 
                        : 'border-gray-200 focus:border-blue-500 focus:bg-blue-50'
                    }`}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –∏–º—è"
                    required={isSignUp}
                  />
                </div>
                {validationErrors.fullName && (
                  <p className="text-sm text-red-600 flex items-center space-x-1">
                    <AlertCircle className="w-4 h-4" />
                    <span>{validationErrors.fullName}</span>
                  </p>
                )}
              </div>
            )}

            {/* Email */}
            <div className="space-y-2">
              <label className="block text-sm font-semibold text-gray-700">
                Email –∞–¥—Ä–µ—Å
              </label>
              <div className="relative">
                <Mail className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  type="email"
                  value={formData.email}
                  onChange={(e) => handleInputChange('email', e.target.value)}
                  className={`w-full pl-12 pr-4 py-4 border-2 rounded-xl focus:outline-none transition-all duration-300 ${
                    validationErrors.email 
                      ? 'border-red-300 focus:border-red-500 bg-red-50' 
                      : 'border-gray-200 focus:border-blue-500 focus:bg-blue-50'
                  }`}
                  placeholder="your@email.com"
                  required
                />
              </div>
              {validationErrors.email && (
                <p className="text-sm text-red-600 flex items-center space-x-1">
                  <AlertCircle className="w-4 h-4" />
                  <span>{validationErrors.email}</span>
                </p>
              )}
            </div>

            {/* Password */}
            <div className="space-y-2">
              <label className="block text-sm font-semibold text-gray-700">
                –ü–∞—Ä–æ–ª—å
              </label>
              <div className="relative">
                <Lock className="absolute left-4 top-1/2 transform -translate-y-1/2 text-gray-400 w-5 h-5" />
                <input
                  type={showPassword ? 'text' : 'password'}
                  value={formData.password}
                  onChange={(e) => handleInputChange('password', e.target.value)}
                  className={`w-full pl-12 pr-14 py-4 border-2 rounded-xl focus:outline-none transition-all duration-300 ${
                    validationErrors.password 
                      ? 'border-red-300 focus:border-red-500 bg-red-50' 
                      : 'border-gray-200 focus:border-blue-500 focus:bg-blue-50'
                  }`}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å"
                  required
                  minLength={6}
                />
                <button
                  type="button"
                  onClick={() => setShowPassword(!showPassword)}
                  className="absolute right-4 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600 transition-colors"
                >
                  {showPassword ? <EyeOff className="w-5 h-5" /> : <Eye className="w-5 h-5" />}
                </button>
              </div>
              {validationErrors.password && (
                <p className="text-sm text-red-600 flex items-center space-x-1">
                  <AlertCircle className="w-4 h-4" />
                  <span>{validationErrors.password}</span>
                </p>
              )}
              {isSignUp && (
                <p className="text-xs text-gray-500 mt-1">
                  –ú–∏–Ω–∏–º—É–º 6 —Å–∏–º–≤–æ–ª–æ–≤
                </p>
              )}
            </div>

            {/* Submit Button */}
            <button
              type="submit"
              disabled={loading}
              className="w-full bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700 text-white font-semibold py-4 px-6 rounded-xl transition-all duration-300 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-3 shadow-lg hover:shadow-xl transform hover:scale-105"
            >
              {loading ? (
                <div className="w-6 h-6 border-2 border-white border-t-transparent rounded-full animate-spin"></div>
              ) : (
                <>
                  {isSignUp ? <UserPlus className="w-5 h-5" /> : <LogIn className="w-5 h-5" />}
                  <span className="text-lg">
                    {isSignUp ? '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç' : '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É'}
                  </span>
                </>
              )}
            </button>
          </form>

          {/* Toggle Mode */}
          <div className="text-center mt-8">
            <p className="text-gray-600 mb-3">
              {isSignUp ? '–£–∂–µ –µ—Å—Ç—å –∞–∫–∫–∞—É–Ω—Ç?' : '–ù–µ—Ç –∞–∫–∫–∞—É–Ω—Ç–∞?'}
            </p>
            <button
              onClick={toggleMode}
              className="text-blue-600 hover:text-blue-700 font-semibold text-lg transition-all duration-300 hover:underline"
            >
              {isSignUp ? '–í–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É' : '–°–æ–∑–¥–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç'}
            </button>
          </div>
        </div>

        {/* Footer */}
        <div className="text-center mt-8 animate-fadeIn">
          <p className="text-sm text-gray-500">
            ¬© 2024 TeamHub. –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–µ–∫—Ç–∞–º–∏.
          </p>
        </div>
      </div>
    </div>
  );
};