import { supabase } from '../lib/supabase';

interface NotificationData {
  userId: string;
  telegramId?: number;
  message: string;
  notificationType: 'task_assigned' | 'task_completed' | 'deadline_reminder' | 'project_invitation';
  entityId?: string;
}

class TelegramNotificationService {
  private readonly botFunctionUrl = `${import.meta.env.VITE_SUPABASE_URL}/functions/v1/telegram-bot`;

  async sendNotification(data: NotificationData) {
    try {
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const { error } = await supabase
        .from('telegram_notifications')
        .insert({
          user_id: data.userId,
          telegram_id: data.telegramId || 0,
          message: data.message,
          notification_type: data.notificationType,
          entity_id: data.entityId,
          delivered: false
        });

      if (error) {
        console.error('Error saving notification:', error);
        return false;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ –±–æ—Ç–∞ (–µ—Å–ª–∏ –µ—Å—Ç—å telegram_id)
      if (data.telegramId) {
        const response = await fetch('/api/telegram/send', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            chat_id: data.telegramId,
            message: data.message,
            notification_type: data.notificationType
          }),
        });

        if (!response.ok) {
          console.error('Error sending telegram message:', await response.text());
          return false;
        }
      }

      return true;
    } catch (error) {
      console.error('Error sending notification:', error);
      return false;
    }
  }

  async sendTaskAssignedNotification(assigneeId: string, taskTitle: string, projectTitle: string) {
    // –ü–æ–ª—É—á–∞–µ–º telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: profile } = await supabase
      .from('profiles')
      .select('telegram_id, full_name')
      .eq('id', assigneeId)
      .single();

    if (profile?.telegram_id) {
      await this.sendNotification({
        userId: assigneeId,
        telegramId: profile.telegram_id,
        message: `üîî *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞*\n\nüìã –ó–∞–¥–∞—á–∞: ${taskTitle}\nüìÅ –ü—Ä–æ–µ–∫—Ç: ${projectTitle}\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.`,
        notificationType: 'task_assigned'
      });
    }
  }

  async sendTaskCompletedNotification(projectId: string, taskTitle: string, assigneeName: string) {
    // –ü–æ–ª—É—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    const { data: members } = await supabase
      .from('project_members')
      .select(`
        user_id,
        role,
        profile:profiles (
          telegram_id,
          full_name
        )
      `)
      .eq('project_id', projectId)
      .in('role', ['owner', 'observer']);

    if (members) {
      for (const member of members) {
        if (member.profile?.telegram_id) {
          await this.sendNotification({
            userId: member.user_id,
            telegramId: member.profile.telegram_id,
            message: `‚úÖ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞*\n\nüìã –ó–∞–¥–∞—á–∞: ${taskTitle}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${assigneeName}\n\n–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`,
            notificationType: 'task_completed'
          });
        }
      }
    }
  }

  async sendDeadlineReminder(userId: string, taskTitle: string, dueDate: Date) {
    const { data: profile } = await supabase
      .from('profiles')
      .select('telegram_id, full_name')
      .eq('id', userId)
      .single();

    if (profile?.telegram_id) {
      const daysUntilDeadline = Math.ceil((dueDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24));
      
      await this.sendNotification({
        userId,
        telegramId: profile.telegram_id,
        message: `‚è∞ *–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω*\n\nüìã –ó–∞–¥–∞—á–∞: ${taskTitle}\nüìÖ –î–µ–¥–ª–∞–π–Ω: ${dueDate.toLocaleDateString('ru-RU')}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${daysUntilDeadline} –¥–Ω.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ–≤—Ä–µ–º—è!`,
        notificationType: 'deadline_reminder'
      });
    }
  }

  async sendProjectInvitation(email: string, projectTitle: string, inviterName: string) {
    // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
    const { data: profile } = await supabase
      .from('profiles')
      .select('id, telegram_id, full_name')
      .eq('email', email)
      .single();

    if (profile?.telegram_id) {
      await this.sendNotification({
        userId: profile.id,
        telegramId: profile.telegram_id,
        message: `üì® *–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –ø—Ä–æ–µ–∫—Ç*\n\nüìÅ –ü—Ä–æ–µ–∫—Ç: ${projectTitle}\nüë§ –û—Ç: ${inviterName}\n\n–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –ø—Ä–æ–µ–∫—Ç—É. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –æ—Ç–≤–µ—Ç–∞.`,
        notificationType: 'project_invitation'
      });
    }
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–µ–¥–ª–∞–π–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
  async checkAndSendDeadlineReminders() {
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    tomorrow.setHours(0, 0, 0, 0);

    const dayAfterTomorrow = new Date(tomorrow);
    dayAfterTomorrow.setDate(dayAfterTomorrow.getDate() + 1);

    try {
      const { data: tasks } = await supabase
        .from('tasks')
        .select(`
          id,
          title,
          due_date,
          assignee_id,
          project:projects (
            title
          )
        `)
        .gte('due_date', tomorrow.toISOString())
        .lt('due_date', dayAfterTomorrow.toISOString())
        .neq('status', 'done');

      if (tasks) {
        for (const task of tasks) {
          if (task.assignee_id && task.due_date) {
            await this.sendDeadlineReminder(
              task.assignee_id,
              task.title,
              new Date(task.due_date)
            );
          }
        }
      }
    } catch (error) {
      console.error('Error checking deadlines:', error);
    }
  }
}

export const telegramNotificationService = new TelegramNotificationService();