import { serve } from "https://deno.land/std@0.168.0/http/server.ts"

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

interface TelegramUpdate {
  update_id: number
  message?: {
    message_id: number
    from: {
      id: number
      first_name: string
      last_name?: string
      username?: string
    }
    chat: {
      id: number
      type: string
    }
    date: number
    text?: string
  }
}

interface TelegramMessage {
  chat_id: number
  text: string
  parse_mode?: string
  reply_markup?: any
}

const TELEGRAM_BOT_TOKEN = Deno.env.get('TELEGRAM_BOT_TOKEN')!
const SUPABASE_URL = Deno.env.get('SUPABASE_URL')!
const SUPABASE_SERVICE_ROLE_KEY = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!

// –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram
async function sendTelegramMessage(message: TelegramMessage) {
  const response = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`, {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify(message),
  })
  
  return response.json()
}

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
function generateVerificationCode(): string {
  return Math.floor(100000 + Math.random() * 900000).toString()
}

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function saveVerificationCode(telegramId: number, email: string, code: string) {
  const response = await fetch(`${SUPABASE_URL}/rest/v1/telegram_verifications`, {
    method: 'POST',
    headers: {
      'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
      'Content-Type': 'application/json',
      'apikey': SUPABASE_SERVICE_ROLE_KEY,
    },
    body: JSON.stringify({
      telegram_id: telegramId,
      email: email,
      verification_code: code,
      expires_at: new Date(Date.now() + 10 * 60 * 1000).toISOString(), // 10 –º–∏–Ω—É—Ç
      verified: false
    }),
  })
  
  if (!response.ok) {
    throw new Error('Failed to save verification code')
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
async function verifyCode(telegramId: number, code: string) {
  const response = await fetch(
    `${SUPABASE_URL}/rest/v1/telegram_verifications?telegram_id=eq.${telegramId}&verification_code=eq.${code}&verified=eq.false&expires_at=gt.${new Date().toISOString()}`,
    {
      headers: {
        'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
      },
    }
  )
  
  const data = await response.json()
  
  if (data.length > 0) {
    // –ü–æ–º–µ—á–∞–µ–º –∫–æ–¥ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
    await fetch(`${SUPABASE_URL}/rest/v1/telegram_verifications?id=eq.${data[0].id}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
        'Content-Type': 'application/json',
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
      },
      body: JSON.stringify({ verified: true }),
    })
    
    return data[0]
  }
  
  return null
}

// –°–≤—è–∑—ã–≤–∞–Ω–∏–µ Telegram —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
async function linkTelegramToUser(email: string, telegramId: number, username?: string) {
  // –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ email
  const userResponse = await fetch(
    `${SUPABASE_URL}/rest/v1/profiles?email=eq.${email}`,
    {
      headers: {
        'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
      },
    }
  )
  
  const users = await userResponse.json()
  
  if (users.length > 0) {
    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await fetch(`${SUPABASE_URL}/rest/v1/profiles?id=eq.${users[0].id}`, {
      method: 'PATCH',
      headers: {
        'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
        'Content-Type': 'application/json',
        'apikey': SUPABASE_SERVICE_ROLE_KEY,
      },
      body: JSON.stringify({
        telegram_id: telegramId,
        telegram_username: username
      }),
    })
    
    return users[0]
  }
  
  return null
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ
export async function sendTaskNotification(userId: string, taskTitle: string, projectTitle: string) {
  try {
    const userResponse = await fetch(
      `${SUPABASE_URL}/rest/v1/profiles?id=eq.${userId}`,
      {
        headers: {
          'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
          'apikey': SUPABASE_SERVICE_ROLE_KEY,
        },
      }
    )
    
    const users = await userResponse.json()
    
    if (users.length > 0 && users[0].telegram_id) {
      await sendTelegramMessage({
        chat_id: users[0].telegram_id,
        text: `üîî *–ù–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞*\n\nüìã –ó–∞–¥–∞—á–∞: ${taskTitle}\nüìÅ –ü—Ä–æ–µ–∫—Ç: ${projectTitle}\n\n–ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π.`,
        parse_mode: 'Markdown'
      })
    }
  } catch (error) {
    console.error('Error sending task notification:', error)
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π –∑–∞–¥–∞—á–µ
export async function sendTaskCompletedNotification(projectId: string, taskTitle: string, assigneeName: string) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º —Ä—É–∫–æ–≤–æ–¥–∏—Ç–µ–ª–µ–π –∏ –Ω–∞–±–ª—é–¥–∞—Ç–µ–ª–µ–π –ø—Ä–æ–µ–∫—Ç–∞
    const membersResponse = await fetch(
      `${SUPABASE_URL}/rest/v1/project_members?project_id=eq.${projectId}&role=in.(owner,observer)&select=*,profile:profiles(*)`,
      {
        headers: {
          'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
          'apikey': SUPABASE_SERVICE_ROLE_KEY,
        },
      }
    )
    
    const members = await membersResponse.json()
    
    for (const member of members) {
      if (member.profile.telegram_id) {
        await sendTelegramMessage({
          chat_id: member.profile.telegram_id,
          text: `‚úÖ *–ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞*\n\nüìã –ó–∞–¥–∞—á–∞: ${taskTitle}\nüë§ –ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å: ${assigneeName}\n\n–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞.`,
          parse_mode: 'Markdown'
        })
      }
    }
  } catch (error) {
    console.error('Error sending task completed notification:', error)
  }
}

// –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–∏–±–ª–∏–∂–∞—é—â–µ–º—Å—è –¥–µ–¥–ª–∞–π–Ω–µ
export async function sendDeadlineNotification(userId: string, taskTitle: string, dueDate: Date) {
  try {
    const userResponse = await fetch(
      `${SUPABASE_URL}/rest/v1/profiles?id=eq.${userId}`,
      {
        headers: {
          'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
          'apikey': SUPABASE_SERVICE_ROLE_KEY,
        },
      }
    )
    
    const users = await userResponse.json()
    
    if (users.length > 0 && users[0].telegram_id) {
      const daysUntilDeadline = Math.ceil((dueDate.getTime() - Date.now()) / (1000 * 60 * 60 * 24))
      
      await sendTelegramMessage({
        chat_id: users[0].telegram_id,
        text: `‚è∞ *–ü—Ä–∏–±–ª–∏–∂–∞–µ—Ç—Å—è –¥–µ–¥–ª–∞–π–Ω*\n\nüìã –ó–∞–¥–∞—á–∞: ${taskTitle}\nüìÖ –î–µ–¥–ª–∞–π–Ω: ${dueDate.toLocaleDateString('ru-RU')}\n‚è≥ –û—Å—Ç–∞–ª–æ—Å—å: ${daysUntilDeadline} –¥–Ω.\n\n–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á—É –≤–æ–≤—Ä–µ–º—è!`,
        parse_mode: 'Markdown'
      })
    }
  } catch (error) {
    console.error('Error sending deadline notification:', error)
  }
}

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response('ok', { headers: corsHeaders })
  }

  try {
    const body: TelegramUpdate = await req.json()
    
    if (body.message?.text) {
      const chatId = body.message.chat.id
      const text = body.message.text
      const userId = body.message.from.id
      const username = body.message.from.username
      
      // –ö–æ–º–∞–Ω–¥–∞ /start
      if (text === '/start' || text === '/start register') {
        await sendTelegramMessage({
          chat_id: chatId,
          text: `üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Hermes Project Manager!\n\nüîó –î–ª—è —Å–≤—è–∑–∏ –≤–∞—à–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n\`/verify –≤–∞—à@email.com\`\n\nüìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n/help - –ø–æ–º–æ—â—å\n/verify - –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞\n/status - —Å—Ç–∞—Ç—É—Å –∞–∫–∫–∞—É–Ω—Ç–∞`,
          parse_mode: 'Markdown'
        })
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ /help
      else if (text === '/help') {
        await sendTelegramMessage({
          chat_id: chatId,
          text: `üìö *–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º:*\n\n/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n/verify email - –ø—Ä–∏–≤—è–∑–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç\n/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å\n/tasks - –º–æ–∏ –∑–∞–¥–∞—á–∏\n/help - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n\nüîî –ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø—Ä–∏—Å—ã–ª–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:\n‚Ä¢ –ù–æ–≤—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö\n‚Ä¢ –ü—Ä–∏–±–ª–∏–∂–∞—é—â–∏—Ö—Å—è –¥–µ–¥–ª–∞–π–Ω–∞—Ö`,
          parse_mode: 'Markdown'
        })
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ /verify email
      else if (text.startsWith('/verify ')) {
        const email = text.replace('/verify ', '').trim()
        
        if (!email.includes('@')) {
          await sendTelegramMessage({
            chat_id: chatId,
            text: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /verify –≤–∞—à@email.com'
          })
        } else {
          const verificationCode = generateVerificationCode()
          
          try {
            await saveVerificationCode(userId, email, verificationCode)
            
            await sendTelegramMessage({
              chat_id: chatId,
              text: `üìß –ö–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n\nüîë –í–∞—à –∫–æ–¥: \`${verificationCode}\`\n\n‚è∞ –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.\n–í–≤–µ–¥–∏—Ç–µ –µ–≥–æ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø—Ä–∏–≤—è–∑–∫–∏ –∞–∫–∫–∞—É–Ω—Ç–∞.`,
              parse_mode: 'Markdown'
            })
          } catch (error) {
            await sendTelegramMessage({
              chat_id: chatId,
              text: '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.'
            })
          }
        }
      }
      
      // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ (6-–∑–Ω–∞—á–Ω–æ–µ —á–∏—Å–ª–æ)
      else if (/^\d{6}$/.test(text)) {
        const verification = await verifyCode(userId, text)
        
        if (verification) {
          const user = await linkTelegramToUser(verification.email, userId, username)
          
          if (user) {
            await sendTelegramMessage({
              chat_id: chatId,
              text: `‚úÖ *–ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–≤—è–∑–∞–Ω!*\n\nüë§ Email: ${verification.email}\nüîó Telegram: @${username || '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'}\n\nüîî –¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∑–∞–¥–∞—á–∞—Ö –∏ –¥–µ–¥–ª–∞–π–Ω–∞—Ö.`,
              parse_mode: 'Markdown'
            })
          } else {
            await sendTelegramMessage({
              chat_id: chatId,
              text: '‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º email –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏.'
            })
          }
        } else {
          await sendTelegramMessage({
            chat_id: chatId,
            text: '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∏–ª–∏ –∏—Å—Ç–µ–∫—à–∏–π –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏. –ó–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –∫–æ–º–∞–Ω–¥–æ–π /verify –≤–∞—à@email.com'
          })
        }
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ /status
      else if (text === '/status') {
        const userResponse = await fetch(
          `${SUPABASE_URL}/rest/v1/profiles?telegram_id=eq.${userId}`,
          {
            headers: {
              'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
              'apikey': SUPABASE_SERVICE_ROLE_KEY,
            },
          }
        )
        
        const users = await userResponse.json()
        
        if (users.length > 0) {
          await sendTelegramMessage({
            chat_id: chatId,
            text: `‚úÖ *–ê–∫–∫–∞—É–Ω—Ç –ø—Ä–∏–≤—è–∑–∞–Ω*\n\nüë§ Email: ${users[0].email}\nüìù –ò–º—è: ${users[0].full_name}\nüîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –≤–∫–ª—é—á–µ–Ω—ã`,
            parse_mode: 'Markdown'
          })
        } else {
          await sendTelegramMessage({
            chat_id: chatId,
            text: '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify –≤–∞—à@email.com –¥–ª—è –ø—Ä–∏–≤—è–∑–∫–∏.'
          })
        }
      }
      
      // –ö–æ–º–∞–Ω–¥–∞ /tasks
      else if (text === '/tasks') {
        const userResponse = await fetch(
          `${SUPABASE_URL}/rest/v1/profiles?telegram_id=eq.${userId}`,
          {
            headers: {
              'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
              'apikey': SUPABASE_SERVICE_ROLE_KEY,
            },
          }
        )
        
        const users = await userResponse.json()
        
        if (users.length > 0) {
          const tasksResponse = await fetch(
            `${SUPABASE_URL}/rest/v1/tasks?assignee_id=eq.${users[0].id}&status=neq.done&select=*,project:projects(title)`,
            {
              headers: {
                'Authorization': `Bearer ${SUPABASE_SERVICE_ROLE_KEY}`,
                'apikey': SUPABASE_SERVICE_ROLE_KEY,
              },
            }
          )
          
          const tasks = await tasksResponse.json()
          
          if (tasks.length > 0) {
            const tasksList = tasks.map((task: any, index: number) => 
              `${index + 1}. ${task.title}\n   üìÅ ${task.project.title}\n   ‚è∞ ${task.due_date ? new Date(task.due_date).toLocaleDateString('ru-RU') : '–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω–∞'}`
            ).join('\n\n')
            
            await sendTelegramMessage({
              chat_id: chatId,
              text: `üìã *–í–∞—à–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏:*\n\n${tasksList}`,
              parse_mode: 'Markdown'
            })
          } else {
            await sendTelegramMessage({
              chat_id: chatId,
              text: '‚úÖ –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á!'
            })
          }
        } else {
          await sendTelegramMessage({
            chat_id: chatId,
            text: '‚ùå –ê–∫–∫–∞—É–Ω—Ç –Ω–µ –ø—Ä–∏–≤—è–∑–∞–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /verify –≤–∞—à@email.com'
          })
        }
      }
      
      // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞
      else {
        await sendTelegramMessage({
          chat_id: chatId,
          text: '‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–æ–º–∞–Ω–¥.'
        })
      }
    }

    return new Response(JSON.stringify({ ok: true }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  } catch (error) {
    console.error('Error:', error)
    return new Response(JSON.stringify({ error: error.message }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    })
  }
})